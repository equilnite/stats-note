{
  "hash": "98759c2fddb35d6c0f84804645dfe423",
  "result": {
    "engine": "knitr",
    "markdown": "# Critical Values\n\n\n::: {.cell}\n\n:::\n\n\n## $z^\\ast$\n\nWhen constructing confidence intervals, we need the value $z^\\ast$ such that $C$% of the estimated sampling distribution is between $-|z^\\ast|$ and $|z^\\ast|$. In other words, imagine:\n\n\n\n```{ojs}\n\nfunction t_df(from, to, df) {\n    var x = d3.range(from, to + 0.005, 0.01);\n    var result = [];\n    x.forEach((val, i) => {\n        result.push({\"x\": val, \"y\": jStat.studentt.pdf(val, df), \"lab\": \"t distribution with df = \" + df + \" degrees of freedom\"});\n    })\n    return result;\n}\n\nfunction t_critical_val(C, df) {\n    var val = jStat.studentt.inv((100 - C) / 2 / 100, df);\n    return [val, -1 * val]\n}\n\nfunction t_conf_region(C, df) {\n    var cutoffs = t_critical_val(C, df);\n    var x = d3.range(cutoffs[0], cutoffs[1] + 0.005, 0.01);\n    var result = [];\n        x.forEach((val, i) => {\n        result.push({\"x\": val, \"y\": jStat.studentt.pdf(val, df), \"lab\": \"t distribution with df = \" + df + \" degrees of freedom\"});\n    });\n    return result;\n}\n\nPlot.plot({\n  marks: [\n    Plot.areaY(t_conf_region(C2, df),\n      {\n        x: \"x\", \n        y: \"y\",\n        fillOpacity: 0.3\n      }\n    ),\n    Plot.line(t_df(-4, 4, df),\n      {\n        x: \"x\", \n        y: \"y\",\n        stroke: \"lab\",\n        strokeWidth: 3\n      }\n    ),\n    Plot.ruleX([t_critical_val(C2, df)[0]]),\n    Plot.ruleX([t_critical_val(C2, df)[1]]),\n    Plot.text([{\"x\": t_critical_val(C2, df)[0] + 0.4, \"y\": 0.35}, {\"x\": t_critical_val(C2, df)[1] - 0.4, \"y\": 0.35}], {x: \"x\", y:\"y\", text: [\"-|t*| = \" + t_critical_val(C2, df)[0].toFixed(2), \"|t*| = \" + t_critical_val(C2, df)[1].toFixed(2)]})\n  ],\n    \n    x: { label: \"t\" },\n    y: {domain: [0, .41],\n    label: \"Density\"},\n    color: {\n        legend: true\n    },\n    caption: \"t distribution with df = \" + df + \" degrees of freedom\"\n})\n\nviewof df = Inputs.range(\n[1, 100],\n{value: 3, step: 1, label: \"Degrees of Freedom (df):\"}\n)\n\nviewof C2 = Inputs.range(\n[1, 99.99],\n{value: 95, step: 0.01, label: \"Confidence Level:\"}\n)\n\n```\n\n```{ojs}\n\nfunction standard_z(from, to) {\n    var x = d3.range(from, to + 0.005, 0.01);\n    var normal = [];\n    x.forEach((val, i) => {\n        normal.push({\"x\": val, \"y\": jStat.normal.pdf(val, 0, 1), \"lab\": \"Standard Normal\"});\n    })\n    return normal;\n}\n\n\nfunction critical_val(C) {\n    var val = jStat.normal.inv((100 - C) / 2 / 100, 0, 1);\n    return [val, -1 * val]\n}\n\nfunction conf_region(C) {\n    var cutoffs = critical_val(C);\n    var x = d3.range(cutoffs[0], cutoffs[1] + 0.005, 0.01);\n    var result = [];\n        x.forEach((val, i) => {\n        result.push({\"x\": val, \"y\": jStat.normal.pdf(val, 0, 1), \"lab\": \"Standard Normal\"});\n    });\n    return result;\n}\n\nPlot.plot({\n  marks: [\n    Plot.areaY(conf_region(C),\n      {\n        x: \"x\", \n        y: \"y\",\n        fillOpacity: 0.3\n      }\n    ),\n    Plot.line(standard_z(-4, 4),\n      {\n        x: \"x\", \n        y: \"y\",\n        stroke: \"lab\",\n        strokeWidth: 3\n      }\n    ),\n    Plot.ruleX([critical_val(C)[0]]),\n    Plot.ruleX([critical_val(C)[1]]),\n    Plot.text([{\"x\": critical_val(C)[0] + 0.4, \"y\": 0.35}, {\"x\": critical_val(C)[1] - 0.4, \"y\": 0.35}], {x: \"x\", y:\"y\", text: [\"-|z*| = \" + critical_val(C)[0].toFixed(2), \"|z*| = \" + critical_val(C)[1].toFixed(2)]})\n  ],\n    \n    x: { label: \"z\" },\n    y: {domain: [0, .41],\n    label: \"Density\"},\n    color: {\n        legend: true\n    },\n    caption: \"Standard Normal Distribution\"\n})\n\nviewof C = Inputs.range(\n[1, 99.99],\n{value: 95, step: 0.01, label: \"Confidence Level:\"}\n)\n\n```\n\n\n<!-- ```{r Conf level on normal dist, warning = FALSE}\nlibrary(ggplot2)\n\nggplot() + xlim(-4,4) +\n    geom_polygon(aes(x = c(-2, seq(-2,2,0.01), 2), \n                     y = c(0, dnorm(seq(-2, 2, 0.01)), 0)), \n                 alpha = 0.5) +\n    stat_function(fun = dnorm, size = 1.2, n = 1000) + theme_void() +\n    annotate(\"segment\", x = -2, xend = -2, y = -.01, yend = .01, size = 1.1) + \n    annotate(\"text\", x = -2, y = -.025, label = expression(paste('-|', z^'*', '|'))) +\n    annotate(\"segment\", x = 2, xend = 2, y = -.01, yend = .01, size = 1.1) + \n    annotate(\"text\", x = 2, y = -.025, label = expression(paste('|', z^'*', '|'))) +\n    annotate(\"segment\", x = -2.5, y = .2, xend = -1.5, yend = .05, arrow = arrow(), size = 1.1) +\n    annotate(\"text\", x = -2.5, y = 0.225, label =  \"Confidence Level C\")\n``` -->\n\nSo if we want to $z$ that corresponds to the confidence level, we have to determine the area of the left/right tail that corresponds to the confidence level. We know that if there's $C$% in the middle, then there's $100\\% - C$ left in the two tails. For one tail, that'll be $\\frac{100\\% - C}{2}$.\n\nLook up that proportion in [Table A](#table-a) in the middle of the table, take the larger value if it's not on there specifically, and back track to the margins to get your desired value of $z^\\ast$.\n\nThe sign of any critical value does not matter, so just take the absolute value as your critical value.\n\n### Examples\n\n- 90% confidence\n\n> Find that the area that we want is: $\\frac{100\\% - 90%}{2} = 5\\% = 0.05$\n>  \n> Try to find 0.05 in the middle of Table A and you notice that it is between 0.0505 and 0.0495.\n> \n> Take the larger value, 0.0505 and look at the margins for the $z$ that corresponds to it, -1.64.\n>\n> Just take the positive value, $z^\\ast = 1.64$.\n\nAlternatively, do the calculator command `invNorm(0.05)` to get a value of around -1.64. Take the positive value as your critical value, $z^\\ast = 1.64$.\n    \n- 99% confidence\n\n> Find that the area that we want is: $\\frac{100\\% - 99%}{2} = 0.5\\% = 0.005$\n> \n> Try to find 0.005 in the middle of Table A and you notice that it is between 0.0051 and 0.0049.\n> \n> Take the larger value, 0.0051 and look at the margins for the $z$ that corresponds to it, -2.57.\n> \n> Just take the positive value, $z^\\ast = 2.57$.\n\nAlternatively, do the calculator command `invNorm(0.005)` to get a value of around -2.5758. Take the positive value as your critical value, $z^\\ast = 2.58$.\n\n\n## $t^\\ast$\n\nThe same principles for $z^\\ast$ applies to $t^\\ast$, except we have to use degrees of freedom too.\n\n\n[Table B](#table-b) conveniently has a confidence level margin at the bottom of the table, which corresponds to the tail probability that's given in the top margin of the table.\n\nThe left margin is where you should look for the degrees of freedom, calculated by $df = n-1$.\n\nFind the critical value by: looking up the degrees of freedom and the confidence level in the left margin and bottom margin respectively. Round the degrees of freedom down. The critical value is the number that you pinpoint in the middle of the table.\n\n<details>\n<summary> Why round down? </summary>\n\nBy rounding the degrees of freedom down, you use a more conservative estimate. \n\n[The main reason that we are even using the $t$-distribution is because it is more conservative than the Normal distribution](#t-justification). \n\nBy rounding the degrees of freedom down, you use a more conservative $t$-distribution (more area in the tails), so you ensure that you do not underestimate your answer, rather, you purposely overestimate your answer.\n\n</details>\n\n### Examples\n\n- 90% confidence and 24 degrees of freedom\n\n> Look at the $df = 24$ row and the confidence level 90% column.\n>\n> Take the value in the middle of the table that you pinpoint from that row and column, $t^\\ast = 1.711$\n\n- 99% confidence and 96 degrees of freedom\n\n> Round your df down to the next available value. $df = 96 \\sim 80$.\n> \n> Look at the $df = 80$ row and the confidence level 99% column.\n> \n> Take the value in the middle of the table that you pinpoint from that row and column, $t^\\ast = 2.639$\n",
    "supporting": [
      "critical-values_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}